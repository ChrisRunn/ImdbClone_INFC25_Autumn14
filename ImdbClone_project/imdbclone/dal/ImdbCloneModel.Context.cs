//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class imdbcloneEntities : DbContext
    {
        public imdbcloneEntities()
            : base("name=imdbcloneEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actor> Actor { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<Director> Director { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<Movie> Movie { get; set; }
    
        public virtual ObjectResult<Actor> usp_GetAllActors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetAllActors");
        }
    
        public virtual ObjectResult<Actor> usp_GetAllActors(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetAllActors", mergeOption);
        }
    
        public virtual ObjectResult<usp_GetActedByNameOrTitle_Result> usp_GetActedByNameOrTitle(string searchString)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetActedByNameOrTitle_Result>("usp_GetActedByNameOrTitle", searchStringParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetActorByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetActorByName", nameParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetActorByName(string name, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetActorByName", mergeOption, nameParameter);
        }
    
        public virtual ObjectResult<Director> usp_GetAllDirectors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Director>("usp_GetAllDirectors");
        }
    
        public virtual ObjectResult<Director> usp_GetAllDirectors(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Director>("usp_GetAllDirectors", mergeOption);
        }
    
        public virtual ObjectResult<Genre> usp_GetAllGenres()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Genre>("usp_GetAllGenres");
        }
    
        public virtual ObjectResult<Genre> usp_GetAllGenres(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Genre>("usp_GetAllGenres", mergeOption);
        }
    
        public virtual ObjectResult<Movie> usp_GetAllMovies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetAllMovies");
        }
    
        public virtual ObjectResult<Movie> usp_GetAllMovies(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetAllMovies", mergeOption);
        }
    
        public virtual ObjectResult<Movie> usp_GetAllMoviesForActor(string name, Nullable<System.DateTime> birthdate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetAllMoviesForActor", nameParameter, birthdateParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetAllMoviesForActor(string name, Nullable<System.DateTime> birthdate, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetAllMoviesForActor", mergeOption, nameParameter, birthdateParameter);
        }
    
        public virtual ObjectResult<usp_GetAllMoviesForDirector_Result> usp_GetAllMoviesForDirector(string name, Nullable<System.DateTime> birthdate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllMoviesForDirector_Result>("usp_GetAllMoviesForDirector", nameParameter, birthdateParameter);
        }
    
        public virtual ObjectResult<usp_GetDirectedByNameOrTitle_Result> usp_GetDirectedByNameOrTitle(string searchString)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDirectedByNameOrTitle_Result>("usp_GetDirectedByNameOrTitle", searchStringParameter);
        }
    
        public virtual ObjectResult<Director> usp_GetDirectorByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Director>("usp_GetDirectorByName", nameParameter);
        }
    
        public virtual ObjectResult<Director> usp_GetDirectorByName(string name, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Director>("usp_GetDirectorByName", mergeOption, nameParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMovieByTitle(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMovieByTitle", titleParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMovieByTitle(string title, MergeOption mergeOption)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMovieByTitle", mergeOption, titleParameter);
        }
    
        public virtual ObjectResult<usp_GetMovieGenreByGenreOrTitle_Result> usp_GetMovieGenreByGenreOrTitle(string searchString)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMovieGenreByGenreOrTitle_Result>("usp_GetMovieGenreByGenreOrTitle", searchStringParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMoviesByGenre(string genre)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("genre", genre) :
                new ObjectParameter("genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMoviesByGenre", genreParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMoviesByGenre(string genre, MergeOption mergeOption)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("genre", genre) :
                new ObjectParameter("genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMoviesByGenre", mergeOption, genreParameter);
        }
    
        public virtual int usp_ErrorHandling(string customizedErrorMessage)
        {
            var customizedErrorMessageParameter = customizedErrorMessage != null ?
                new ObjectParameter("customizedErrorMessage", customizedErrorMessage) :
                new ObjectParameter("customizedErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ErrorHandling", customizedErrorMessageParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetAllActorsForMovie(string title, Nullable<int> year)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetAllActorsForMovie", titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetAllActorsForMovie(string title, Nullable<int> year, MergeOption mergeOption)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetAllActorsForMovie", mergeOption, titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Genre> usp_GetAllGenresForMovie(string title, Nullable<int> year)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Genre>("usp_GetAllGenresForMovie", titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Genre> usp_GetAllGenresForMovie(string title, Nullable<int> year, MergeOption mergeOption)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Genre>("usp_GetAllGenresForMovie", mergeOption, titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMovieByTitleAndYear(string title, Nullable<int> year)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMovieByTitleAndYear", titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Movie> usp_GetMovieByTitleAndYear(string title, Nullable<int> year, MergeOption mergeOption)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie>("usp_GetMovieByTitleAndYear", mergeOption, titleParameter, yearParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetActorByNameAndBirthdate(string name, Nullable<System.DateTime> birthdate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetActorByNameAndBirthdate", nameParameter, birthdateParameter);
        }
    
        public virtual ObjectResult<Actor> usp_GetActorByNameAndBirthdate(string name, Nullable<System.DateTime> birthdate, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Actor>("usp_GetActorByNameAndBirthdate", mergeOption, nameParameter, birthdateParameter);
        }
    
        public virtual int usp_CreateActed(string name, Nullable<System.DateTime> birthdate, string title, Nullable<int> year)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateActed", nameParameter, birthdateParameter, titleParameter, yearParameter);
        }
    
        public virtual int usp_CreateDirected(string name, Nullable<System.DateTime> birthdate, string title, Nullable<int> year)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateDirected", nameParameter, birthdateParameter, titleParameter, yearParameter);
        }
    
        public virtual int usp_CreateMovieGenre(string genre, string title, Nullable<int> year)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("genre", genre) :
                new ObjectParameter("genre", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateMovieGenre", genreParameter, titleParameter, yearParameter);
        }
    
        public virtual int usp_DeleteActed(string name, Nullable<System.DateTime> birthdate, string title, Nullable<int> year)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteActed", nameParameter, birthdateParameter, titleParameter, yearParameter);
        }
    
        public virtual int usp_DeleteMovieGenre(string genre, string title, Nullable<int> year)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("genre", genre) :
                new ObjectParameter("genre", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteMovieGenre", genreParameter, titleParameter, yearParameter);
        }
    
        public virtual int usp_DeleteDirected(string name, Nullable<System.DateTime> birthdate, string title, Nullable<int> year)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDirected", nameParameter, birthdateParameter, titleParameter, yearParameter);
        }
    }
}
